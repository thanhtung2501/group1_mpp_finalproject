package mpp.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import mpp.business.controller.ControllerInterface;
import mpp.business.controller.SystemController;
import mpp.business.exception.CheckoutBookException;
import mpp.business.model.LibraryMember;
import mpp.business.util.CommonUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.List;

public class CheckoutWindow implements MessageableWindow {

    private static final Logger LOG = LoggerFactory.getLogger(CheckoutWindow.class);
    private final ControllerInterface systemController = new SystemController();

    private JPanel mainPanel;
    private JPanel topPanel;
    private JPanel middlePanel;
    private JPanel checkoutPanel;
    private JLabel lbnMemberID;
    private JTextField txtMemberID;
    private JLabel lbnBookISBN;
    private JTextField txtISBN;
    private JButton btnCheckout;
    private JPanel recordEntryPanel;
    private JTable tblRecordEntry;
    private JScrollPane checkoutScrollPane;

    private JScrollPane scrollPane;

    private final DefaultTableModel model;

    public CheckoutWindow() {
        model = new DefaultTableModel(null, CommonUtil.DEFAULT_COLUMN_HEADERS);
        tblRecordEntry.setModel(model);
        tblRecordEntry.setShowGrid(true);
        txtMemberID.getDocument().addDocumentListener(new ValueChangedListener());
        txtISBN.getDocument().addDocumentListener(new ValueChangedListener());

        btnCheckout.addActionListener(e -> {
            try {
                LibraryMember libraryMember = systemController.checkoutBook(txtMemberID.getText().trim(), txtISBN.getText().trim());
                displayInfo("Checking out '" + txtISBN.getText().trim() + "' was success");
                clearTable(model);
                List<String[]> rows = CommonUtil.parseCheckoutRecordEntryRows(libraryMember);
                rows.forEach(model::addRow);
                tblRecordEntry.updateUI();
            } catch (CheckoutBookException ex) {
                displayError(ex.getMessage());
            }
        });

        getMainPanel().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                super.componentShown(e);
                setWelcomeUser();
            }
        });
    }

    private void updateCheckoutButton() {
        btnCheckout.setEnabled(false);
        if (!txtMemberID.getText().trim().isEmpty() && !txtISBN.getText().trim().isEmpty()) {
            btnCheckout.setEnabled(true);
        }
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    private void clearTable(DefaultTableModel tableModel) {
        for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        topPanel = new JPanel();
        topPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(topPanel, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setText("Checkout Book");
        topPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        topPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        topPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        middlePanel = new JPanel();
        middlePanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(middlePanel, BorderLayout.CENTER);
        checkoutPanel = new JPanel();
        checkoutPanel.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        middlePanel.add(checkoutPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lbnMemberID = new JLabel();
        lbnMemberID.setText("Member ID");
        checkoutPanel.add(lbnMemberID, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtMemberID = new JTextField();
        checkoutPanel.add(txtMemberID, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        lbnBookISBN = new JLabel();
        lbnBookISBN.setText("ISBN");
        checkoutPanel.add(lbnBookISBN, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtISBN = new JTextField();
        checkoutPanel.add(txtISBN, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnCheckout = new JButton();
        btnCheckout.setEnabled(false);
        btnCheckout.setText("Checkout");
        checkoutPanel.add(btnCheckout, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        checkoutPanel.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        recordEntryPanel = new JPanel();
        recordEntryPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        middlePanel.add(recordEntryPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        checkoutScrollPane = new JScrollPane();
        recordEntryPanel.add(checkoutScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        checkoutScrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Checkout Record Entries", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        tblRecordEntry = new JTable();
        tblRecordEntry.setGridColor(new Color(-15843304));
        checkoutScrollPane.setViewportView(tblRecordEntry);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    class ValueChangedListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            updateCheckoutButton();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateCheckoutButton();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateCheckoutButton();
        }
    }
}
