package mpp.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import mpp.business.controller.ControllerInterface;
import mpp.business.controller.SystemController;
import mpp.business.model.LibraryMember;
import mpp.librarysystem.Util;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;

public class ExportCheckoutRecordWindow implements MessageableWindow {

    private static final Logger LOG = LoggerFactory.getLogger(ExportCheckoutRecordWindow.class);
    private final ControllerInterface systemController = new SystemController();
    private JPanel topPanel;
    private JPanel mainPanel;
    private JPanel middlePanel;
    private JComboBox cboMemberID;
    private JTable tblRecordEntry;
    private JButton btnPrint;

    private final DefaultTableModel tableModel;

    private final String[] DEFAULT_COLUMN_HEADERS
            = {"Member ID", "ISBN", "Book Copy ID", "Checkout Date", "Due Date"};
    private ComboBoxModel model;

    private String selectedItem = "";

    public ExportCheckoutRecordWindow() {
        populateCboData();
        tableModel = new DefaultTableModel(null, DEFAULT_COLUMN_HEADERS);
        tblRecordEntry.setModel(tableModel);
        tblRecordEntry.setShowGrid(true);
        cboMemberID.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                selectedItem = e.getItem().toString();
                clearTable(tableModel);
                List<String[]> rows = new ArrayList<>();
                if (!selectedItem.contains("Select")) {
                    String memberID = selectedItem.substring(0, selectedItem.indexOf("-"));
                    LibraryMember libraryMember = systemController.getAllLibraryMembers().get(memberID);
                    if (libraryMember != null) {
                      //  rows = Util.parseCheckoutRecordEntryRows(libraryMember); //TODO
                        rows.forEach(tableModel::addRow);
                        tblRecordEntry.updateUI();
                    }
                }
                btnPrint.setEnabled(rows.isEmpty() ? false : true);

            }
        });

        btnPrint.addActionListener(e -> {
            printConsole(tableModel.getDataVector(), selectedItem);
        });
        mainPanel.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                super.componentShown(e);
                setWelcomeUser();
                populateCboData();
            }
        });
    }

    void populateCboData() {
        Map<String, LibraryMember> libraryMemberMap = systemController.getAllLibraryMembers();
        List<String> data = new ArrayList<>();
        data.add("--Select--");
        data.addAll(libraryMemberMap.values().stream()
                .map(l -> new MemberCboData(l.getMemberId(), l.getFirstName(), l.getLastName()).toString())
                .toList());

        model = new DefaultComboBoxModel(data.toArray(new String[data.size()]));
        cboMemberID.setModel(model);
        cboMemberID.updateUI();
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        topPanel = new JPanel();
        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        mainPanel.add(topPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Export Checkout Record");
        topPanel.add(label1);
        middlePanel = new JPanel();
        middlePanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(middlePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Member ID");
        middlePanel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cboMemberID = new JComboBox();
        middlePanel.add(cboMemberID, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnPrint = new JButton();
        btnPrint.setEnabled(false);
        btnPrint.setText("Print");
        middlePanel.add(btnPrint, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-11393774)), "Checkout Records", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        tblRecordEntry = new JTable();
        tblRecordEntry.setGridColor(new Color(-11397351));
        scrollPane1.setViewportView(tblRecordEntry);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    class MemberCboData {
        private String memberID;

        private String firstName;

        private String lastName;

        public MemberCboData(String memberID, String firstName, String lastName) {
            this.memberID = memberID;
            this.firstName = firstName;
            this.lastName = lastName;
        }

        @Override
        public String toString() {
            return memberID + "-" + firstName + " " + lastName;
        }
    }

    private void clearTable(DefaultTableModel tableModel) {
        for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }

    private void printConsole(Vector<Vector> allRows, String libraryMember) {
        LOG.info("---------------------------------------------------------------------------------------");
        LOG.info(String.format("%10s %15s %15s %20s %20s", "MEMBER ID", "ISBN", "BOOK COPY ID", "CHECKOUT DATE", "DUE DATE"));
        LOG.info("---------------------------------------------------------------------------------------");
        for (int i = 0; i < allRows.size(); i++) {
            int colSize = allRows.get(i).size();
            LOG.info(String.format("%10s %15s %15s %20s %20s",
                    colSize > 0 ? allRows.get(i).get(0) : "",
                    colSize > 1 ? allRows.get(i).get(1) : "",
                    colSize > 2 ? allRows.get(i).get(2) : "",
                    colSize > 3 ? allRows.get(i).get(3) : "",
                    colSize > 4 ? allRows.get(i).get(4) : ""));
        }
        LOG.info("---------------------------------------------------------------------------------------");

        displayInfo("Checkout record entries of '" + libraryMember + "' were printed out in the console!");
    }

}
